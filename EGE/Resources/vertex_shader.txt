#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexColor;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 MeshColor;
uniform mat3 LightPosition_worldspace;
//out vec3 fragmentColor;
out vec4 fragment_color;
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	mat4 MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	Position_worldspace = (ModelMatrix * vec4(vertexPosition_modelspace,1)).xyz;
	UV = vertexColor;
	fragment_color = MeshColor[0];

	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( ViewMatrix * ModelMatrix * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( ViewMatrix * vec4(LightPosition_worldspace[0],1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( ViewMatrix * ModelMatrix * vec4(vertexNormal_modelspace,0)).xyz;
	 // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

}